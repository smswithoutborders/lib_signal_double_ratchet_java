plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}

def versionsPropertiesFile = rootProject.file("version.properties")
def releasePropertiesFile= rootProject.file("release.properties")

def versionProperties = new Properties()
versionProperties.load(new FileInputStream(versionsPropertiesFile))

def releaseProperties = new Properties()
releaseProperties.load(new FileInputStream(releasePropertiesFile))

android {
    namespace 'com.afkanerd.smswithoutborders.libsignal_doubleratchet'
    compileSdk 34

    defaultConfig {
        minSdk 24
        targetSdk 34
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        aarMetadata {
            minCompileSdk = 24
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        nightly {
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testFixtures {
        enable = true
    }

    publishing {
        singleVariant('release') {
            withJavadocJar()
            withSourcesJar()
        }
    }

}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    archiveClassifier.set('sources')
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.afkanerd.smswithoutborders'
            artifactId = 'libsignal_doubleratchet'
            version = "0.0.3"
//            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            // Optionally, define the sources artifact to be published
//            artifact(sourceJar)
            afterEvaluate {
                from components.release
            }

            pom {
                name = 'SMSWithoutBorders LibSignal Double Ratchet'
                packaging = 'aar'
                // optionally artifactId can be defined here
                description = 'An implementation of the Double Ratchet Algorithm as provided by Signal protocol'
                //                url 'http://www.example.com/example-application'

                scm {
                    connection = 'scm:git:https://github.com/smswithoutborders/lib_signal_double_ratchet_java.git'
                    developerConnection = 'scm:git:https://github.com/smswithoutborders/lib_signal_double_ratchet_java.git'
                    url = 'https://github.com/smswithoutborders/lib_signal_double_ratchet_java'
                }

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'sherlock'
                        name = 'Sherlock Wisdom'
                        email = 'wisdom@smswithoutborders.com'
                    }
                }
            }

        }

    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/smswithoutborders/lib_signal_double_ratchet_java")
            credentials {
                username = releaseProperties['github_username']
                password = releaseProperties['github_token']
            }
        }
    }
//    repositories {
//        maven {
//            name = "Sonatype"
//            url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
//
//            credentials {
//                username = releaseProperties["ossrhUsername"]
//                password = releaseProperties["ossrhPassword"]
//            }
//        }
//        maven {
//            name = "Sonatype-Snapshots"
//            url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
//            credentials {
//                username = releaseProperties["ossrhUsername"]
//                password = releaseProperties["ossrhPassword"]
//            }
//        }
//    }
}

task bundleForSonatype(type: Zip) {
    from "$buildDir/outputs/aar/${project.getName()}-release.aar"
    from "$buildDir/publications/mavenJava/pom-default.xml"
    into("$buildDir/bundle")
    archiveFileName = "${project.getName()}-bundle.zip"
}

//def localProperties = new Properties()
//localProperties.load(new FileInputStream(rootProject.file("local.properties")))
//signing {
////    def signingKeyId = localProperties.getProperty("signingKeyId")
////    def signingPassword = localProperties.getProperty("signingPassword")
////    def signingKey = localProperties.getProperty("signingSecretKeyRingFile")
////
////    useInMemoryPgpKeys( signingKeyId, signingKey, signingPassword)
////
////    sign(publishing.publications["release"])
//
//    sign publishing.publications.mavenJava
//}
//

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.7.0'
//    implementation 'com.google.android.material:material:1.11.0'
    implementation 'com.google.guava:guava:33.0.0-jre'
    implementation 'com.google.crypto.tink:tink:1.12.0'
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'
    implementation 'org.conscrypt:conscrypt-android:2.2.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'org.whispersystems:curve25519-android:0.5.0'
}
